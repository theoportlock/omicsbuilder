#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import matplotlib.pyplot as plt
import argparse
import sys
import utils

def shapiro(df):
    import pandas as pd
    from scipy.stats import shapiro
    output = pd.DataFrame()
    for col in df.columns: 
        for cat in df.index.unique():
            output.loc[col,cat] = shapiro(df.loc[cat,col])[1]
    return output

def levene(df):
    import pandas as pd
    from scipy.stats import levene
    output = pd.Series()
    for col in df.columns: 
        output[col] = levene(*[df.loc[cat,col] for cat in df.index.unique()])[1]
    return output

def ANCOM(df, perm=False):
    import pandas as pd
    from skbio.stats.composition import ancom
    from scipy.stats import mannwhitneyu
    from itertools import combinations
    from itertools import permutations
    combs = list(combinations(df.index.unique(), 2))
    if perm: combs = list(permutations(df.index.unique(), 2))
    outdf = pd.DataFrame(
            [ancom(pd.concat([df.loc[i[0]], df.loc[i[1]]]), pd.concat([df.loc[i[0]], df.loc[i[1]]]).index.to_series())[0]['Reject null hypothesis'] for i in combs],
            columns = df.columns,
            index = combs,
            )
    return outdf

def sig(df, mult=False, perm=False):
    from scipy.stats import mannwhitneyu
    from statsmodels.stats.multitest import fdrcorrection 
    from itertools import combinations
    from itertools import permutations
    import numpy as np
    import pandas as pd
    combs = list(combinations(df.index.unique(), 2))
    if perm: combs = list(permutations(df.index.unique(), 2))
    outdf = pd.DataFrame(
        [mannwhitneyu(df.loc[i[0]], df.loc[i[1]])[1] for i in combs],
        columns = df.columns,
        index = combs
        ).T
    if mult:
        outdf = pd.DataFrame(
            fdrcorrection(outdf.values.flatten())[1].reshape(outdf.shape),
            columns = outdf.columns,
            index = outdf.index
            )
    return outdf

def lfc(df, mult=False, perm=False):
    import pandas as pd
    import numpy as np
    from scipy.stats import mannwhitneyu
    from itertools import combinations
    from itertools import permutations
    from statsmodels.stats.multitest import fdrcorrection 
    from skbio.stats.composition import multiplicative_replacement as m
    if mult: df = pd.DataFrame(m(df), index=df.index, columns=df.columns)
    combs = list(combinations(df.index.unique(), 2))
    if perm: combs = list(permutations(df.index.unique(), 2))
    outdf = pd.DataFrame(np.array(
        [df.loc[i[0]].mean().div(df.loc[i[1]].mean()) for i in combs]),
        columns = df.columns,
        index = combs
        ).T.apply(np.log2)
    return outdf

def changesummary(subject):
    # CHANGED
    import pandas as pd
    output = pd.read_csv(f'../results/{subject}changes.csv', index_col=0)
    changed = 'sig changed = ' +\
        str(output['MWW_q-value'].lt(0.05).sum()) + '/' + str(output.shape[0]) + ' (' + str(round(output['MWW_q-value'].lt(0.05).sum()/output.shape[0] * 100)) + '%)'
    # INCREASED
    increased = 'sig increased = ' +\
        str(output.loc[(output['MWW_q-value'].lt(0.05)) & (output[output.columns[output.columns.str.contains('Log2')]].gt(0).iloc[:,0]), 'MWW_q-value'].lt(0.05).sum()) +\
        '/' +\
        str(output.shape[0]) +\
        ' (' +\
        str(round(output.loc[(output['MWW_q-value'].lt(0.05)) & (output[output.columns[output.columns.str.contains('Log2')]].gt(0).iloc[:,0]), 'MWW_q-value'].lt(0.05).sum()/output.shape[0] * 100)) +\
        '%)'
    # DECREASED
    decreased = 'sig decreased = ' +\
        str(output.loc[(output['MWW_q-value'].lt(0.05)) & (output[output.columns[output.columns.str.contains('Log2')]].lt(0).iloc[:,0]), 'MWW_q-value'].lt(0.05).sum()) +\
        '/' +\
        str(output.shape[0]) +\
        ' (' +\
        str(round(output.loc[(output['MWW_q-value'].lt(0.05)) & (output[output.columns[output.columns.str.contains('Log2')]].lt(0).iloc[:,0]), 'MWW_q-value'].lt(0.05).sum()/output.shape[0] * 100)) +\
        '%)'
    summary = pd.DataFrame([changed,increased,decreased], columns=[subject])
    summary.to_csv(f'../results/{subject}ChangeSummary.csv', index=False)
    return summary

def main(subject):
    df = utils.reader(subject)
    lfc = f.lfc(df)
    lfc.columns = lfc.columns.str.join('/')
    lfc = lfc.replace([np.inf, -np.inf], np.nan)
    sig = f.sig(df)
    sig.columns = sig.columns.str.join('/')
    lfc = lfc.set_axis(['Log2(' + lfc.columns[0] + ')'], axis=1)
    sig = sig.set_axis(['MWW_q-value'], axis=1)
    basemean = df.mean().to_frame('basemean')
    means = df.groupby(level=0).mean().T
    means.columns = means.columns + '_Mean'
    baseprevail = f.richness(df.T).div(df.shape[0]).to_frame('baseprevail')
    prevail = df.groupby(level=0, axis=0).apply(lambda x: f.richness(x, axis=0).div(x.shape[0])).T
    prevail.columns = prevail.columns + '_Prev'
    output = pd.concat([basemean,means,baseprevail,prevail,lfc,sig], join='inner', axis=1).sort_values('MWW_q-value')
    output.to_csv(f'../results/{subject}change.tsv', sep='\t')
    return output

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Change - Produces a report of the significant feature changes')
    parser.add_argument('name')
    parser.add_argument('-o', '--output')
    args = parser.parse_args()
    main(args)
